{"ast":null,"code":"var _jsxFileName = \"/home/binduk/REACT/blinkist/src/molecules/SearchBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { TextField } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = `{\"books\":[{\"id\":1,\"src\":\"1.png\",\"name\":\"Bring Your Human to Work\", \"author\":\"Erica Keswin\", \"duration\":\"13\"},\n{\"id\":2,\"src\":\"2.png\",\"name\":\"Employee to Entrepreneur\", \"author\":\"Steve Glaveski\", \"duration\":\"15\"},\n{\"id\":3,\"src\":\"3.png\",\"name\":\"Doesn’t Hurt to Ask\", \"author\":\"Trey Gowdy\", \"duration\":\"13\",\"noOfReads\":\"1.9\"}\n]}`;\nconst data2 = JSON.parse(data);\nconst myData = data2.books; //console.log(myData)\n\nconst SearchBar = props => {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState('');\n  /* const search= (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>)=>{\n    //console.log(e.target.value)\n    let filter=e.target.value.toLowerCase();\n    for(let i=0;i<props.books.length; i++){\n        let textvalue= props.books[i].name.toLowerCase();\n        if(textvalue.indexOf(filter)> -1){\n              <MyCard progressBar='half' button='Finished' \n              id={props.books[i].id} key={props.books[i].id} \n              src={props.books[i].src} name={props.books[i].name} author={props.books[i].author} duration={props.books[i].duration}\n              noOfReads={props.books[i].noOfReads}\n              />\n        }\n    }\n    console.log(`the filtered books are `)\n    filteredBooks.map(book => console.log(book.name))\n  } */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      style: {\n        width: '750px'\n      },\n      onChange: e => {\n        setSearchTerm(e.target.value);\n      },\n      label: \"Search by title or author\",\n      variant: \"standard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 1\n    }, this), myData.filter(val => {\n      if (searchTerm == \"\") return val;else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())) {\n        return val;\n      }\n    }).map((val, key) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", val.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 8\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBar, \"YAxLNde9buDBdNo+a8YOFgSd3e4=\");\n\n_c = SearchBar;\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/home/binduk/REACT/blinkist/src/molecules/SearchBar.tsx"],"names":["React","useState","TextField","data","data2","JSON","parse","myData","books","SearchBar","props","searchTerm","setSearchTerm","width","e","target","value","filter","val","name","toLowerCase","includes","map","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAwBC,QAAxB,QAAwC,OAAxC;AAEA,SAAyBC,SAAzB,QAAsF,eAAtF;;AAaA,MAAMC,IAAI,GAAE;AACZ;AACA;AACA,GAHA;AAKA,MAAMC,KAAK,GAAEC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAb;AACA,MAAMI,MAAM,GAAEH,KAAK,CAACI,KAApB,C,CACA;;AACA,MAAMC,SAAS,GAAEC,KAAD,IAAgB;AAAA;;AAC9B,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,sBACI;AAAA,4BACR,QAAC,SAAD;AAAW,MAAA,KAAK,EAAE;AAACY,QAAAA,KAAK,EAAC;AAAP,OAAlB;AAAoC,MAAA,QAAQ,EAAGC,CAAD,IAAK;AACjDF,QAAAA,aAAa,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACD,OAFD;AAEG,MAAA,KAAK,EAAC,2BAFT;AAEqC,MAAA,OAAO,EAAC;AAF7C;AAAA;AAAA;AAAA;AAAA,YADQ,EAMPT,MAAM,CAACU,MAAP,CAAeC,GAAD,IAAW;AACxB,UAAGP,UAAU,IAAI,EAAjB,EACE,OAAOO,GAAP,CADF,KAEK,IAAIA,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgCV,UAAU,CAACS,WAAX,EAAhC,CAAJ,EAA8D;AACjE,eAAOF,GAAP;AACD;AACF,KANA,EAMEI,GANF,CAMM,CAACJ,GAAD,EAASK,GAAT,KAAqB;AAC5B,0BAAO;AAAA,wBAAOL,GAAG,CAACC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAEC,KATA,CANO;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH,CA3CD;;GAAMV,S;;KAAAA,S;AA6CN,eAAeA,SAAf","sourcesContent":["import React, { useRef, useState } from 'react';\nimport SearchOutlinedIcon from '@mui/icons-material/SearchOutlined';\nimport { InputAdornment, TextField ,Grid, Menu, MenuItem, Typography, Container} from '@mui/material';\nimport MyCard from './MyCard';\n\ninterface Props{\n  books:{id: number,\n    src: string,\n    name: string,\n    author: string,\n    duration: string,\n    noOfReads?: string}[],\n    changePage?:any\n}\n\nconst data=`{\"books\":[{\"id\":1,\"src\":\"1.png\",\"name\":\"Bring Your Human to Work\", \"author\":\"Erica Keswin\", \"duration\":\"13\"},\n{\"id\":2,\"src\":\"2.png\",\"name\":\"Employee to Entrepreneur\", \"author\":\"Steve Glaveski\", \"duration\":\"15\"},\n{\"id\":3,\"src\":\"3.png\",\"name\":\"Doesn’t Hurt to Ask\", \"author\":\"Trey Gowdy\", \"duration\":\"13\",\"noOfReads\":\"1.9\"}\n]}`\n\nconst data2= JSON.parse(data);\nconst myData= data2.books;\n//console.log(myData)\nconst SearchBar=(props:Props)=> {\n  const [searchTerm,setSearchTerm]= useState('')\n\n  /* const search= (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>)=>{\n    //console.log(e.target.value)\n    let filter=e.target.value.toLowerCase();\n    for(let i=0;i<props.books.length; i++){\n        let textvalue= props.books[i].name.toLowerCase();\n        if(textvalue.indexOf(filter)> -1){\n              <MyCard progressBar='half' button='Finished' \n              id={props.books[i].id} key={props.books[i].id} \n              src={props.books[i].src} name={props.books[i].name} author={props.books[i].author} duration={props.books[i].duration}\n              noOfReads={props.books[i].noOfReads}\n              />\n        }\n    }\n    console.log(`the filtered books are `)\n    filteredBooks.map(book => console.log(book.name))\n  } */\n    return (\n        <div>\n<TextField style={{width:'750px'}}  onChange={(e)=>{\n  setSearchTerm(e.target.value)\n}} label=\"Search by title or author\" variant=\"standard\" />\n\n\n{myData.filter((val:any)=>{\n  if(searchTerm == \"\")\n    return val \n  else if (val.name.toLowerCase().includes(searchTerm.toLowerCase())){\n    return val\n  }\n}).map((val:any,key:any) => {\nreturn <div> {val.name} </div>\n\n})}\n{/* <MyCard progressBar='half' button='Finished' id={val.id} key={val.id} src={val.src} name={val.name} author={val.author} duration={val.duration}\n    noOfReads={val.noOfReads}\n    /> */}\n\n\n</div> );\n\n}\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}